{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# CS661 Assign6\n",
        "Name: Matthew Van Praagh"
      ],
      "metadata": {
        "id": "vurZJGWvSCKW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 1. Class Vs Instance\n",
        "\n",
        "Construct a program that illustrates the difference between Class and Instance in OOP according to these specifications.\n",
        "\n",
        "### Class ClassVsInstance\n",
        "\n",
        "1. Define a class named ClassVsInstance.\n",
        "\n",
        "1. Each instance of ClassVsInstance is given a unique serial number when it is instantiated by its constructor.\n",
        "\n",
        "1. The serial number is saved in each instance using  the variable `_serial`.\n",
        "\n",
        "1. The serial number can be accessed through the instance method `getserial()`.\n",
        "\n",
        "1. The most recent serial number generated is stored in a class attribute, `_last_serial`.  The first instance serial number should be 1.\n",
        "\n",
        "1. A class attribute `_limit` should be accessible through a static method, `getlimit()`, and initialized to 16.\n",
        "\n",
        "1. The string representation of an instance should be returned by the `built-in str()` method, and should be \"I am number n\" where n is the serial number of the instance.\n",
        "\n",
        "### Test Driver\n",
        "\n",
        "1. A test driver program outside the class should create a fixed-length list of ClassVsInstance occurrences based on the size returned by getlimit(), each element initialized to `None`.\n",
        "1. Import the `random` module, and in a loop up to the size of the list, the test driver should generate a random number `s` (use `random.randint(lowest, highest))`, `0 <= s < _limit`, and for each iteration, construct and store an instance of ClassVsInstance in the list. Start searching for an empty list element at the generated random number subscript. If a list position is occupied, move up to the next position, wrapping at the end of the list. Keep track of the number of list probes necessary to store all _limit occurrences. A probe is one examination of the list.  If you started at 4 and 4 and 5 were occupied and 6 was empty, that would be three probes (1 to find 4 occupied, 1 to find 5 occupied, 1 to find 6 empty).\n",
        "1. After all LIMIT entries are filled, go through the list and display the string representation of each instance. Use a compiled regular expression to extract the serial number from the string representation and add it to a running sum.  At the end, display the number of list elements, the number of probes needed to fill the array, and the sum.\n",
        "\n",
        "The output should look something like:\n",
        "\n",
        "    I am number 7\n",
        "    I am number 10\n",
        "    I am number 11\n",
        "    I am number 1\n",
        "    I am number 4\n",
        "    I am number 3\n",
        "    I am number 9\n",
        "    I am number 12\n",
        "    I am number 16\n",
        "    I am number 6\n",
        "    I am number 2\n",
        "    I am number 5\n",
        "    I am number 8\n",
        "    I am number 13\n",
        "    I am number 14\n",
        "    I am number 15\n",
        "    16 instances were constructed in __ tries, the sum is 136.\n",
        "\n",
        "Of course, your output's order and number of tries will be different, but the sum should be the same. The sum will be the sum of the numbers from 1 to 16.\n",
        "\n"
      ],
      "metadata": {
        "id": "u4OE7p0by2vM"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "CceHA69ky0RV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "637dd108-9ebe-4eeb-e8a9-29dc760c6853"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "I am number 16\n",
            "I am number 7\n",
            "I am number 9\n",
            "I am number 10\n",
            "I am number 12\n",
            "I am number 4\n",
            "I am number 11\n",
            "I am number 5\n",
            "I am number 3\n",
            "I am number 1\n",
            "I am number 8\n",
            "I am number 13\n",
            "I am number 14\n",
            "I am number 2\n",
            "I am number 6\n",
            "I am number 15\n",
            "16 instances were constructed in 44 tries, the sum is 136.\n"
          ]
        }
      ],
      "source": [
        "import random\n",
        "import re\n",
        "\n",
        "class ClassVsInstance:\n",
        "  _last_serial = 0\n",
        "  _limit = 16\n",
        "  def __init__(self):\n",
        "    ClassVsInstance._last_serial += 1\n",
        "    self._serial = ClassVsInstance._last_serial\n",
        "\n",
        "  def getserial(self):\n",
        "    return self._serial\n",
        "\n",
        "  def getlimit():\n",
        "    return ClassVsInstance._limit\n",
        "\n",
        "  def __str__(self):\n",
        "    return 'I am number {}'.format(self._serial)\n",
        "\n",
        "def main():\n",
        "    limit = ClassVsInstance.getlimit()\n",
        "    instances = [None] * limit\n",
        "    tries = 0\n",
        "\n",
        "    for i in range(limit):\n",
        "        s = random.randint(0, limit - 1)\n",
        "\n",
        "        while instances[s] is not None:\n",
        "            tries += 1\n",
        "            s = (s + 1) % limit\n",
        "\n",
        "        instances[s] = ClassVsInstance()\n",
        "        tries += 1\n",
        "\n",
        "    sum_of_serials = 0\n",
        "    for instance in instances:\n",
        "        print(instance)\n",
        "        match = re.search(r'\\d+', str(instance))\n",
        "        if match:\n",
        "            sum_of_serials += int(match.group(0))\n",
        "\n",
        "    print(f\"{limit} instances were constructed in {tries} tries, the sum is {sum_of_serials}.\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 2. A Thermostat Class\n",
        "\n",
        "Design a Thermostat class according to the following specifications\n",
        "\n",
        "Each instance of the Thermostat class is intended to control the thermostat temperature using any of Kelvin, Celsius (Centigrade), and Fahrenheit degrees. It also supports new temperature settings in any of these scales.  The temperature can also be modified by an increment or decrement in any of the three scales.\n",
        "\n",
        "The class should implement the following class attributes.\n",
        "* _KtoC = 273.15\n",
        "* _FtoCratio = 5.0 / 9.0\n",
        "* _CtoFratio = 9.0 / 5.0\n",
        "* _Foffset = 32.0\n",
        "\n",
        "Use these in the code to avoid repeating numeric constants, other than 0.0.\n",
        "\n",
        "The class should implement the following static methods.\n",
        "\n",
        "* c2f(c) - convert Celsius to Fahrenheit\n",
        "\n",
        "* f2c(f) - convert Fahrenheit to Celsius\n",
        "\n",
        "The class should implement the following methods.\n",
        "\n",
        "* A constructor that accepts 0 or 1 argument and initializes the temperature to 0 degrees Celsius by default, or to the passed Celsius value\n",
        "\n",
        "* `gettemp_k()` - return the Kelvin value of the instance temperature\n",
        "\n",
        "* `gettemp_c()` - return the Celsius value of the instance temperature\n",
        "\n",
        "* `gettemp_f()` - return the Fahrenheit value of the instance temperature\n",
        "\n",
        "* `settemp_k(v)` - set the instance temperature to v degrees Kelvin\n",
        "\n",
        "* `settemp_c(v)` - set the instance temperature to v degrees Celsius\n",
        "\n",
        "* `settemp_f(v)` - set the instance temperature to v degrees Fahrenheit\n",
        "\n",
        "* `change_c(v)` - change the internal temperature by v Celsius degrees\n",
        "\n",
        "* `change_k(v)` - change the internal temperature by v Kelvin degrees\n",
        "\n",
        "* `change_f(v)` - change the internal temperature by v Fahrenheit degrees\n",
        "\n",
        "* internal string method - returns the string value of the instance, in the format `[K=310.15,C=37.00,F=98.60]`\n",
        "\n",
        "* internal representation method - returns the representation of the instance, in the format `<Thermostat constructor-for-current-instance>`, eg. `<Thermostat Thermostat(16.00)>\n",
        "\n",
        "* internal `+=` method (`__iadd__`) - increment the Celsius value by a float or integer using the `+=` operator\n",
        "\n",
        "* internal `-=` method (`__isub__`) - decrement the Celsius value by a float or integer using the `-=` operator\n",
        "\n",
        "If the temperature ever goes below 0K from either change or set, set the temperature to 0K and raise a UserWarning('0K is lowest valid temperature').\n",
        "\n",
        "The relations between the temperature scales are given by:\n",
        "\n",
        "C = K - _KtoC\n",
        "\n",
        "C = _FtoCratio * (F - _Foffset)\n",
        "\n",
        "K to C ratio = 1\n",
        "\n",
        "### Test Driver\n",
        "\n",
        "The following code cell contains the test driver.  If your code is correct, the test driver output should be:\n",
        "\n",
        "    [K=273.15,C=0.00,F=32.00]\n",
        "    [K=283.15,C=10.00,F=50.00]\n",
        "    [K=293.15,C=20.00,F=68.00]\n",
        "    [K=273.15,C=0.00,F=32.00]\n",
        "    [K=323.15,C=50.00,F=122.00]\n",
        "    [K=373.15,C=100.00,F=212.00]\n",
        "    0K is lowest valid temperature\n",
        "    [K=5.00,C=-268.15,F=-450.67]\n",
        "    [K=0.00,C=-273.15,F=-459.67]\n",
        "    [K=310.15,C=37.00,F=98.60]\n",
        "    <Thermostat Thermostat(37.00)>\n",
        "\n",
        "DO NOT modify the test driver.\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "awNLte7A3c8i"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Thermostat:\n",
        "  _KtoC = 273.15\n",
        "  _FtoCratio = 5.0 / 9.0\n",
        "  _CtoFratio = 9.0 / 5.0\n",
        "  _Foffset = 32.0\n",
        "\n",
        "  def __init__(self, celsius=0.0):\n",
        "    self.settemp_c(celsius)\n",
        "\n",
        "  def gettemp_k(self):\n",
        "    return self.gettemp_c() + self._KtoC\n",
        "\n",
        "  def gettemp_c(self):\n",
        "    return self._temp_c\n",
        "\n",
        "  def gettemp_f(self):\n",
        "    return self._CtoFratio * self.gettemp_c() + self._Foffset\n",
        "\n",
        "  def settemp_k(self, v):\n",
        "    self.settemp_c(v - self._KtoC)\n",
        "\n",
        "  def settemp_c(self, v):\n",
        "    if v < -self._KtoC:\n",
        "      self._temp_c = -self._KtoC\n",
        "      raise UserWarning('0K is lowest valid temperature')\n",
        "    else:\n",
        "      self._temp_c = v\n",
        "\n",
        "  def settemp_f(self, v):\n",
        "    self.settemp_c(self._FtoCratio * (v - self._Foffset))\n",
        "\n",
        "  def change_c(self, v):\n",
        "    self.settemp_c(self.gettemp_c() + v)\n",
        "\n",
        "  def change_k(self, v):\n",
        "    self.settemp_k(self.gettemp_k() + v)\n",
        "\n",
        "  def change_f(self, v):\n",
        "    self.settemp_f(self.gettemp_f() + v)\n",
        "\n",
        "  def __str__(self):\n",
        "    return f\"[K={self.gettemp_k():.2f},C={self.gettemp_c():.2f},F={self.gettemp_f():.2f}]\"\n",
        "\n",
        "  def __repr__(self):\n",
        "    return f\"<Thermostat Thermostat({self.gettemp_c():.2f})>\"\n",
        "\n",
        "  def __iadd__(self, value):\n",
        "    self._temp_c += value\n",
        "    return self\n",
        "\n",
        "  def __isub__(self, value):\n",
        "    self._temp_c -= value\n",
        "    return self\n",
        "\n",
        "tests = [10.0, 18.0, -20.0, 50.0, 212.0, -5.0, 5.0, 5.0]\n",
        "attrs = ['change_c', 'change_f', 'change_k', 'settemp_c', 'settemp_f', 'settemp_k', '__iadd__', '__isub__']\n",
        "def test_thermostat():\n",
        "    stat: Thermostat = Thermostat()\n",
        "    print(stat)\n",
        "    for tst, attr in zip(tests, attrs):\n",
        "      try:\n",
        "        getattr(stat, attr)(tst)\n",
        "        print(stat)\n",
        "      except AttributeError as e:\n",
        "        print(str(e))\n",
        "      except UserWarning as e:\n",
        "        print(str(e))\n",
        "    stat = Thermostat(37.0)\n",
        "    print(stat)\n",
        "    print(repr(stat))\n",
        "\n",
        "\n",
        "test_thermostat()\n"
      ],
      "metadata": {
        "id": "I9CCCxv7-YnV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "36d558cb-d0bb-401d-cc1e-09a93bf2b686"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[K=273.15,C=0.00,F=32.00]\n",
            "[K=283.15,C=10.00,F=50.00]\n",
            "[K=293.15,C=20.00,F=68.00]\n",
            "[K=273.15,C=0.00,F=32.00]\n",
            "[K=323.15,C=50.00,F=122.00]\n",
            "[K=373.15,C=100.00,F=212.00]\n",
            "0K is lowest valid temperature\n",
            "[K=5.00,C=-268.15,F=-450.67]\n",
            "[K=0.00,C=-273.15,F=-459.67]\n",
            "[K=310.15,C=37.00,F=98.60]\n",
            "<Thermostat Thermostat(37.00)>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 3. Complex Numbers\n",
        "\n",
        "This question examines how Python's complex numbers work under the covers.\n",
        "\n",
        "A complex number is the sum of a real number (`a`) and a factor (`bj`) of the imaginary square root of -1, (simply named `j`).  Thus, a general complex number is written `a + bj` in Python, and `j` is always the suffix of a number even if the number is 1. Write `5 + 1j` not `5 + j`, or if the factor of `j` is a variable, write `6 + (v * 1j)`.\n",
        "\n",
        "Let $u=a+bj$ and $v=c+dj$. Complex aritmetic is defined as:\n",
        "\n",
        "$u+v=(a+bj)+(c+dj)=(a+c)+(b+d)j$\n",
        "\n",
        "$u-v=(a+bj)-(c+dj)=(a-c)-(b+d)j=(a-c)+(b-d)j$\n",
        "\n",
        "$u\\cdot v=(a+bj)(c+dj)=ac+adj+bcj+bdj^2=(ac-bd)+(ad+bc)j$\n",
        "\n",
        "Division is more complicated.  First define the conjugate of $u$ as $\\bar{u}=a-bj$.  Since $j^2=-1$, $u\\cdot\\bar{u}=(a+bj)(a-bj)=(a^2-b^2j^2)+(abj-abj)=a^2+b^2$.\n",
        "\n",
        "To divide $\\displaystyle\\frac{u}{v}$, multiply by 1, using the conjugate of the denominator, $\\displaystyle \\frac{u}{v}\\cdot\\frac{\\bar{v}}{\\bar{v}}=\\frac{(ac+bd)+(bc-ad)j}{c^2+d^2}$\n",
        "\n",
        "A complex number also has another value associated with it, its magnitude. The magnitude of $u$ is defined as $|u|=\\sqrt{a^2+b^2)}$, which implies that $|u|^2=a^2+b^2$. In Python, the `abs(c)` built-in function returns the magnitude of the complex number c.\n",
        "\n",
        "Code a class `Cmplx` to implement a complex number using three instance variables, `real`, `imag`, and `mag`, as public attributes.  Define the Python operator overload functions for `+`, `-`, `*`, and `/` so that these operators work with instances of `Cmplx`.  Also define a `.conj()` method to return the conjugate.  Define the Python `str()` built-in function to return the string \"d.ddd+d.dddj (mag:d.ddd)\".\n",
        "\n",
        "Always maintain the `.mag` attribute so that it is consistent with the other instance attributes.\n",
        "\n",
        "Execute your class with the given tests. DO NOT change the test driver. If the test driver produces an error, you can uncomment any of the prints that might be relevant to determining the problem.\n",
        "\n",
        "The output should look like:\n",
        "\n",
        "```\n",
        "    6.000+5.000j (mag:7.810)\n",
        "    4.000-4.000j (mag:5.657)\n",
        "    1.000+0.000j (mag:1.000)\n",
        "    0.000+1.000j (mag:1.000)\n",
        "    0.707+0.707j (mag:1.000)\n",
        "    0.707-0.707j (mag:1.000)\n",
        "    10.000+1.000j (mag:10.050)\n",
        "    2.000+9.000j (mag:9.220)\n",
        "    44.000-4.000j (mag:44.181)\n",
        "    0.125+1.375j (mag:1.381)\n",
        "    6.000+5.000j (mag:7.810)\n",
        "    5.000-6.000j (mag:7.810)\n",
        "    1.000+0.000j (mag:1.000)\n",
        "    <__main__.Cmplx object at 0x7d144aa2f220> 32\n",
        "```\n",
        "\n"
      ],
      "metadata": {
        "id": "EgKoX3mWFspU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "\n",
        "class Cmplx:\n",
        "  def __init__(self, real, imag):\n",
        "    self.real = real\n",
        "    self.imag = imag\n",
        "    self.mag = self.calculate_magnitude()\n",
        "\n",
        "  def calculate_magnitude(self):\n",
        "    return math.sqrt(self.real**2 + self.imag**2)\n",
        "\n",
        "  def conj(self):\n",
        "    return Cmplx(self.real, -self.imag)\n",
        "\n",
        "  def __add__(self, x):\n",
        "    return Cmplx(self.real + x.real, self.imag + x.imag)\n",
        "\n",
        "  def __sub__(self, x):\n",
        "    return Cmplx(self.real - x.real, self.imag - x.imag)\n",
        "\n",
        "  def __mul__(self, x):\n",
        "    real_part = self.real * x.real - self.imag * x.imag\n",
        "    imag_part = self.real * x.imag + self.imag * x.real\n",
        "    return Cmplx(real_part, imag_part)\n",
        "\n",
        "  def __truediv__(self, x):\n",
        "    denom = x.real**2 + x.imag**2\n",
        "    real_part = (self.real * x.real + self.imag * x.imag) / denom\n",
        "    imag_part = (self.imag * x.real - self.real * x.imag) / denom\n",
        "    return Cmplx(real_part, imag_part)\n",
        "\n",
        "  def __str__(self):\n",
        "    imag_str = f\"{self.imag:.3f}j\" if self.imag >= 0 else f\"{self.imag:.3f}j\"\n",
        "    return f\"{self.real:.3f}{imag_str} (mag:{self.mag:.3f})\"\n",
        "\n",
        "  def __repr__(self):\n",
        "    return f\"<Cmplx {self.real:.3f}+{self.imag:.3f}j>\"\n",
        "\n",
        "s2 = math.sqrt(2) / 2\n",
        "c1 = 6 + 5j\n",
        "c2 = 4 - 4j\n",
        "c3 = 1 + 0j\n",
        "c4 = 0+1j\n",
        "c5 = s2 + (s2 * 1j)\n",
        "c5c = s2 - (s2 * 1j)\n",
        "# print('c1', c1, 'mag:c1', abs(c1), 'c2', c2, 'mag:c2', abs(c2))\n",
        "# print('c3', c3, 'mag:c3', abs(c3), 'c4', c4, 'mag:c4', abs(c4))\n",
        "# print('c5', c5, 'mag:c5', abs(c5))\n",
        "# print('c5c', c5c, 'mag:c5c', abs(c5c))\n",
        "# print('c1 + c2', c1 + c2)\n",
        "# print('c1 - c2', c1 - c2)\n",
        "# print('c1 * c2', c1 * c2)\n",
        "# print('c1 / c2', c1 / c2)\n",
        "# print('c1 / c3', c1 / c3)\n",
        "# print('c1 / c4', c1 / c4)\n",
        "# print('c5 * c5c', c5 * c5c)\n",
        "ca = Cmplx(6, 5)\n",
        "cb = Cmplx(4, -4)\n",
        "cc = Cmplx(1, 0)\n",
        "cd = Cmplx(0, 1)\n",
        "ce = Cmplx(s2, s2)\n",
        "cec = ce.conj()\n",
        "# print('ca', ca, ' cb', cb)\n",
        "# print('cc', cc, ' cd', cd)\n",
        "# print('ce', ce, ' cec', cec)\n",
        "# print('ca + cb', ca + cb)\n",
        "# print('ca - cb', ca - cb)\n",
        "# print('ca * cb', ca * cb)\n",
        "# print('ca / cb', ca / cb)\n",
        "# print('ca / cc', ca / cc)\n",
        "# print('ca / cd', ca / cd)\n",
        "# print('ce * cec', ce * cec)\n",
        "py = [c1, c2, c3, c4, c5, c5c, c1 + c2, c1 - c2, c1 * c2, c1 / c2,\n",
        "      c1 / c3, c1 / c4, c5 * c5c]\n",
        "py2 = [abs(c1), abs(c2), abs(c3), abs(c4), abs(c5), abs(c5c)]\n",
        "cx = [ca, cb, cc, cd, ce, cec, ca + cb, ca - cb, ca * cb, ca / cb,\n",
        "      ca / cc, ca / cd, ce * cec]\n",
        "cx2 = [ca.mag, cb.mag, cc.mag, cd.mag, ce.mag, cec.mag]\n",
        "for u, v in zip(py, cx):\n",
        "  if u.real != v.real or u.imag != u.imag:\n",
        "    print('error: {}!={}'.format(u, v))\n",
        "for u, v in zip(py2, cx2):\n",
        "  if u != v:\n",
        "    print('error: {}!={}'.format(u, v))\n",
        "for u in cx:\n",
        "    print(u)\n",
        "print(repr(ca), ca.__sizeof__())"
      ],
      "metadata": {
        "id": "xjVUO-k8Fyxk",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "98249989-4407-413d-de5f-febc44a07327"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "6.0005.000j (mag:7.810)\n",
            "4.000-4.000j (mag:5.657)\n",
            "1.0000.000j (mag:1.000)\n",
            "0.0001.000j (mag:1.000)\n",
            "0.7070.707j (mag:1.000)\n",
            "0.707-0.707j (mag:1.000)\n",
            "10.0001.000j (mag:10.050)\n",
            "2.0009.000j (mag:9.220)\n",
            "44.000-4.000j (mag:44.181)\n",
            "0.1251.375j (mag:1.381)\n",
            "6.0005.000j (mag:7.810)\n",
            "5.000-6.000j (mag:7.810)\n",
            "1.0000.000j (mag:1.000)\n",
            "<Cmplx 6.000+5.000j> 32\n"
          ]
        }
      ]
    }
  ]
}